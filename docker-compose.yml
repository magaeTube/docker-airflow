version: '3'
x-airflow-common:
  &airflow-common
  build:
    context: ./
  env_file:
    - .env
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - airflow

  redis:
    image: redis:latest
    container_name: airflow_redis
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - airflow

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    command: version
    env_file:
      - .env
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    networks:
      - airflow

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: scheduler
    volumes:
      - ./dags:/opt/airflow/dags
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: airflow_worker
    hostname: worker
    command: celery worker
    ports:
      - 8793:8793
    volumes:
      - ./dags:/opt/airflow/dags
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  flower:
    <<: *airflow-common
    container_name: airflow_flower
    command: celery flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - airflow
    depends_on:
      airflow-init:
        condition: service_completed_successfully

# Choose Statsd Exporter or Telegraf
#  statsd-exporter:
#    image: prom/statsd-exporter
#    container_name: airflow_statsd_exporter
#    command: "--statsd.listen-udp=:8125 --web.listen-address=:9102 --statsd.mapping-config=/tmp/statsd_mapping.conf"
#    ports:
#      - 9102:9102
#      - 8125:8125/udp
#    volumes:
#      - ./statsd/statsd_mapping.conf:/tmp/statsd_mapping.conf
#    restart: always
#    networks:
#      - airflow
#
#  node-exporter:
#    container_name: node-exporter
#    image: prom/node-exporter
#    ports:
#      - "9100:9100"
#    restart: always
#    networks:
#      - airflow

#  telegraf:
#    image: telegraf
#    container_name: airflow_telegraf
#    restart: always
#    volumes:
#      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      - DOCKER_INFLUXDB_INIT_ORG=
#      - DOCKER_INFLUXDB_INIT_BUCKET=
#      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=
#      - HOST_NAME=
#    networks:
#      - airflow

networks:
  airflow:
    driver: bridge
    external: true
    internal: true

volumes:
  postgres-db-volume: